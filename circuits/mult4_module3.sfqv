# 
# 4 bit multiplier
# 

const WIDTH = 4;

# input and input pattern definitions
input reset_in [0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0];
input load_in  [0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0];
input y_in     [0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0];
input x_in     [0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0];
input s_in     [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
input clock    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];

# output definitions
output reset_out;
output load_out;
output y_out;
output x_out;
output s_out;

module PE(s_out, L_out, X_out, R_out)(y_in, s_in, L_in, X_in, R_in, clock);
	wire Y, PP, S0, C0, S1, C1T, C1;

	Y     = ND G1_1( L_in@0, y_in@1, L_in@2 );
	PP    = ND G2_1( L_in@0,    Y@1, X_in@2 );
	
	S0    = XOR G3_1( PP@0, s_in@0, clock@1 );
	C0    = AND G4_1( PP@0, s_in@0, clock@1 );
	
	
	s_out = XOR G5_1( S0@0, C1@0, clock@1 );
	C1T   = AND G6_1( S0@0, C1@0, clock@1 );
	
	C1    = CB G7_1( C1T@0, C0@0 );
	
	L_out = D G8_1 (L_in@1, clock@0 );
	X_out = D G10_1(X_in@1, clock@0 );
	R_out = D G11_1(R_in@1, clock@0 );
endmodule

# circuit definition
{
	# wire definitions
	wire L[0:`WIDTH-1], X[0:`WIDTH-1], R[0:`WIDTH-1];
	wire sout[1:`WIDTH-1], sin[0:`WIDTH-1];
	genvar i;

	assign sin[0] = s_in;
	assign L[0]   = load_in;
	assign X[0]   = x_in;
	assign R[0]   = reset_in;

	for u0 (i=0; i < `WIDTH-1; i += 1 ){
		(sout[i+1], L[i+1], X[i+1], R[i+1]) = PE PE0(y_in,  sin[i], L[i], X[i], R[i], clock);
		sin[i+1] = NDRO ND0( R[i+1]@2, L[i+1]@2, sout[i+1]@3);
	}

	(s_out, load_out, x_out, reset_out) = PE PE3(y_in, sin[`WIDTH-1], L[`WIDTH-1], X[`WIDTH-1], R[`WIDTH-1], clock);

	assign y_out     = y_in;
}


